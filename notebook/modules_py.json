{
	"name": "modules_py",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fe16cd89-81e2-4a37-a5c6-f1c2b9870d2d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e8f7b24c-0d3c-42d1-a1b7-07c25b51db90/resourceGroups/rg-oea-oealexp/providers/Microsoft.Synapse/workspaces/syn-oea-oealexp/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-oealexp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"class ContosoSIS(BaseOEAModule):\n",
					"    def __init__(self, oea, source_folder='contoso_sis', pseudonymize = True):\n",
					"        BaseOEAModule.__init__(self, oea, source_folder, pseudonymize)\n",
					"        self.schemas['studentattendance'] = [['id', 'string', 'no-op'],\n",
					"                                            ['student_id', 'string', 'hash-no-lookup'],\n",
					"                                            ['school_year', 'integer', 'no-op'],\n",
					"                                            ['school_id', 'string', 'no-op'],\n",
					"                                            ['attendance_date', 'timestamp', 'no-op'],\n",
					"                                            ['all_day', 'string', 'no-op'],\n",
					"                                            ['Period', 'short', 'no-op'],\n",
					"                                            ['section_id', 'string', 'no-op'],\n",
					"                                            ['AttendanceCode', 'string', 'no-op'],\n",
					"                                            ['PresenceFlag', 'boolean', 'no-op'],\n",
					"                                            ['attendance_status', 'string', 'no-op'],\n",
					"                                            ['attendance_type', 'string', 'no-op'],\n",
					"                                            ['attendance_sequence', 'short', 'no-op']]\n",
					"\n",
					"        self.schemas['studentsectionmark'] = [['id', 'string', 'no-op'],\n",
					"                                            ['student_id', 'string', 'hash-no-lookup'],\n",
					"                                            ['section_id', 'string', 'no-op'],\n",
					"                                            ['school_year', 'string', 'no-op'],\n",
					"                                            ['term_id', 'string', 'no-op'],\n",
					"                                            ['numeric_grade_earned', 'short', 'no-op'],\n",
					"                                            ['alpha_grade_earned', 'string', 'no-op'],\n",
					"                                            ['is_final_grade', 'string', 'no-op'],\n",
					"                                            ['credits_attempted', 'short', 'no-op'],\n",
					"                                            ['credits_earned', 'short', 'no-op'],\n",
					"                                            ['grad_credit_type', 'string', 'no-op']]\n",
					"\n",
					"        self.schemas['studentdemographics'] = [['SISID', 'string', 'no-op'],\n",
					"                            ['FederalRaceCategory', 'string', 'hash-no-lookup'],\n",
					"                            ['PrimaryLanguage', 'string', 'no-op'],\n",
					"                            ['ELLStatus', 'string', 'no-op'],\n",
					"                            ['SpecialEducation', 'string', 'no-op'],\n",
					"                            ['LowIncome', 'short', 'no-op']]\n",
					"\n",
					"\n",
					"    def process_latest_from_stage1(self):\n",
					"        latest = oea.get_latest_folder(self.stage1np)\n",
					"        self._process_entity_from_stage1(latest, 'studentattendance', 'csv', 'overwrite', 'true')\n",
					"        self._process_entity_from_stage1(latest, 'studentsectionmark', 'csv', 'overwrite', 'true')\n",
					"        self._process_entity_from_stage1(latest, 'studentdemographics', 'csv', 'overwrite', 'true')\n",
					"\n",
					"    def process_data_from_stage1(self):\n",
					"        self._process_entity_from_stage1('studentattendance', 'csv', 'overwrite', 'true')\n",
					"        self._process_entity_from_stage1('studentsectionmark', 'csv', 'overwrite', 'true')\n",
					"        self._process_entity_from_stage1('studentdemographics', 'csv', 'overwrite', 'true')\n",
					"\n",
					"    def copy_test_data_to_stage1(self):\n",
					"        mssparkutils.fs.cp(self.module_path + '/test_data/studentattendance.csv', self.stage1np + '/studentattendance/studentattendance.csv', True)\n",
					"        mssparkutils.fs.cp(self.module_path + '/test_data/studentsectionmark.csv', self.stage1np + '/studentsectionmark/studentsectionmark.csv', True)\n",
					"        mssparkutils.fs.cp(self.module_path + '/test_data/studentdemographics.csv', self.stage1np + '/studentdemographics/studentdemographics.csv', True)\n",
					"\n",
					"class M365(BaseOEAModule):\n",
					"    \"\"\"\n",
					"    Provides data processing methods for MS Insights data v0.2 format.\n",
					"    \"\"\"\n",
					"\n",
					"    def __init__(self, oea, source_folder='m365', pseudonymize = False):\n",
					"        BaseOEAModule.__init__(self, oea, source_folder, pseudonymize)\n",
					"\n",
					"        self.schemas['Activity'] = [['SignalType', 'string', 'no-op'],\n",
					"                                            ['StartTime', 'timestamp', 'no-op'],\n",
					"                                            ['UserAgent', 'string', 'no-op'],\n",
					"                                            ['SignalId', 'string', 'no-op'],\n",
					"                                            ['SISClassId', 'string', 'no-op'],\n",
					"                                            ['OfficeClassId', 'string', 'no-op'],\n",
					"                                            ['ChannelId', 'string', 'no-op'],\n",
					"                                            ['AppName', 'string', 'no-op'],\n",
					"                                            ['ActorId', 'string', 'hash-no-lookup'],\n",
					"                                            ['ActorRole', 'string', 'no-op'],\n",
					"                                            ['SchemaVersion', 'string', 'no-op'],\n",
					"                                            ['AssignmentId', 'string', 'no-op'],\n",
					"                                            ['SubmissionId', 'string', 'no-op'],\n",
					"                                            ['Action', 'string', 'no-op'],\n",
					"                                            ['AssginmentDueDate', 'string', 'no-op'],\n",
					"                                            ['ClassCreationDate', 'string', 'no-op'],\n",
					"                                            ['Grade', 'string', 'no-op'],\n",
					"                                            ['SourceFileExtension', 'string', 'no-op'],\n",
					"                                            ['MeetingDuration', 'string', 'no-op']]\n",
					"        self.schemas['Calendar'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['Name', 'string', 'no-op'],\n",
					"                                            ['Description', 'string', 'no-op'],\n",
					"                                            ['SchoolYear', 'integer', 'no-op'],\n",
					"                                            ['IsCurrent', 'boolean', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['OrgId', 'string', 'no-op']]\n",
					"        self.schemas['Course'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['Name', 'string', 'no-op'],\n",
					"                                            ['Code', 'string', 'no-op'],\n",
					"                                            ['Description', 'string', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['CalendarId', 'string', 'no-op']]\n",
					"        self.schemas['Org'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['Name', 'string', 'no-op'],\n",
					"                                            ['Identifier', 'string', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['ParentOrgId', 'string', 'no-op'],\n",
					"                                            ['RefOrgTypeId', 'string', 'no-op'],\n",
					"                                            ['SourceSystemId', 'string', 'no-op']]\n",
					"        self.schemas['Person'] = [['Id', 'string', 'hash'],\n",
					"                                            ['FirstName', 'string', 'mask'],\n",
					"                                            ['MiddleName', 'string', 'mask'],\n",
					"                                            ['LastName', 'string', 'mask'],\n",
					"                                            ['GenerationCode', 'string', 'no-op'],\n",
					"                                            ['Prefix', 'string', 'no-op'],\n",
					"                                            ['EnabledUser', 'string', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'hash'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['SourceSystemId', 'string', 'no-op']]\n",
					"        self.schemas['PersonIdentifier'] = [['Id', 'string', 'hash'],\n",
					"                                            ['Identifier', 'string', 'hash'],\n",
					"                                            ['Description', 'string', 'no-op'],\n",
					"                                            ['RefIdentifierTypeId', 'string', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'hash'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['PersonId', 'string', 'hash'],\n",
					"                                            ['SourceSystemId', 'string', 'no-op']]\n",
					"        self.schemas['RefDefinition'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['RefType', 'string', 'no-op'],\n",
					"                                            ['Namespace', 'string', 'no-op'],\n",
					"                                            ['Code', 'string', 'no-op'],\n",
					"                                            ['SortOrder', 'integer', 'no-op'],\n",
					"                                            ['Description', 'string', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op']]\n",
					"        self.schemas['Section'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['Name', 'string', 'no-op'],\n",
					"                                            ['Code', 'string', 'no-op'],\n",
					"                                            ['Location', 'string', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['CourseId', 'string', 'no-op'],\n",
					"                                            ['RefSectionTypeId', 'string', 'no-op'],\n",
					"                                            ['SessionId', 'string', 'no-op'],\n",
					"                                            ['OrgId', 'string', 'no-op']]\n",
					"        self.schemas['Session'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['Name', 'string', 'no-op'],\n",
					"                                            ['BeginDate', 'timestamp', 'no-op'],\n",
					"                                            ['EndDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['CalendarId', 'string', 'no-op'],\n",
					"                                            ['ParentSessionId', 'string', 'no-op'],\n",
					"                                            ['RefSessionTypeId', 'string', 'no-op']]\n",
					"        self.schemas['StaffOrgAffiliation'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['IsPrimary', 'boolean', 'no-op'],\n",
					"                                            ['EntryDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExitDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['OrgId', 'string', 'no-op'],\n",
					"                                            ['PersonId', 'string', 'hash'],\n",
					"                                            ['RefStaffOrgRoleId', 'string', 'no-op']]\n",
					"        self.schemas['StaffSectionMembership'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['IsPrimaryStaffForSection', 'boolean', 'no-op'],\n",
					"                                            ['EntryDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExitDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['PersonId', 'string', 'hash'],\n",
					"                                            ['RefStaffSectionRoleId', 'string', 'no-op'],\n",
					"                                            ['SectionId', 'string', 'no-op']]\n",
					"        self.schemas['StudentOrgAffiliation'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['IsPrimary', 'boolean', 'no-op'],\n",
					"                                            ['EntryDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExitDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['OrgId', 'string', 'no-op'],\n",
					"                                            ['PersonId', 'string', 'hash'],\n",
					"                                            ['RefGradeLevelId', 'string', 'no-op'],\n",
					"                                            ['RefStudentOrgRoleId', 'string', 'no-op'],\n",
					"                                            ['RefEnrollmentStatusId', 'string', 'no-op']]\n",
					"        self.schemas['StudentSectionMembership'] = [['Id', 'string', 'no-op'],\n",
					"                                            ['EntryDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExitDate', 'timestamp', 'no-op'],\n",
					"                                            ['ExternalId', 'string', 'no-op'],\n",
					"                                            ['CreateDate', 'timestamp', 'no-op'],\n",
					"                                            ['LastModifiedDate', 'timestamp', 'no-op'],\n",
					"                                            ['IsActive', 'boolean', 'no-op'],\n",
					"                                            ['PersonId', 'string', 'hash'],\n",
					"                                            ['RefGradeLevelWhenCourseTakenId', 'string', 'no-op'],\n",
					"                                            ['RefStudentSectionRoleId', 'string', 'no-op'],\n",
					"                                            ['SectionId', 'string', 'no-op']]\n",
					"    \n",
					"    def process_activity_data_from_stage1(self):\n",
					"        \"\"\" Processes activity data from stage1 into stage2 using structured streaming. \n",
					"            https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html\n",
					"        \"\"\"\n",
					"        latest = oea.get_latest_folder(self.stage1np)\n",
					"        logger.info(\"Processing activity data from: \" + self.stage1np + '/' + latest)\n",
					"\n",
					"        spark_schema = self.oea.to_spark_schema(self.schemas['Activity'])\n",
					"        df = spark.read.csv(self.stage1np + '/' + latest + '/Activity/*.csv', header='false', schema=spark_schema) \n",
					"        sqlContext.registerDataFrameAsTable(df, 'Activity')\n",
					"        sqlContext.registerDataFrameAsTable(spark.read.format('parquet').load(self.oea.stage2np + '/m365/PersonIdentifier'), 'PersonIdentifier')\n",
					"        sqlContext.registerDataFrameAsTable(spark.read.format('parquet').load(self.oea.stage2np + '/m365/RefDefinition'), 'RefDefinition')\n",
					"\n",
					"        df = spark.sql( \n",
					"            \"select act.SignalType, act.StartTime, act.UserAgent, act.SignalId, act.SISClassId, act.OfficeClassId, act.ChannelId, \\\n",
					"            act.AppName, act.ActorId, act.ActorRole, act.SchemaVersion, act.AssignmentId, act.SubmissionId, act.Action, act.AssginmentDueDate, \\\n",
					"            act.ClassCreationDate, act.Grade, act.SourceFileExtension, act.MeetingDuration, pi.PersonId \\\n",
					"            from PersonIdentifier pi, RefDefinition rd, Activity act \\\n",
					"            where \\\n",
					"                pi.RefIdentifierTypeId = rd.Id \\\n",
					"                and rd.RefType = 'RefIdentifierType' \\\n",
					"                and rd.Code = 'ActiveDirectoryId' \\\n",
					"                and pi.Identifier = act.ActorId\")\n",
					"\n",
					"        df = df.dropDuplicates(['SignalId'])\n",
					"        df = df.withColumn('year', F.year(F.col('StartTime'))).withColumn('month', F.month(F.col('StartTime')))\n",
					"        df = self.oea.fix_column_names(df)\n",
					"        df.write.format('parquet').mode('overwrite').option(\"mergeSchema\", \"true\").save(self.stage2np + '/TechActivity')\n",
					"\n",
					"    def reset_activity_processing(self):\n",
					"        \"\"\" Resets all TechActivity processing. This is intended for use during initial testing - use with caution. \"\"\"\n",
					"        self.oea.rm_if_exists(self.stage2p + '/TechActivity')\n",
					"        self.oea.rm_if_exists(self.stage2np + '/TechActivity')\n",
					"        logger.info(f\"Deleted TechActivity from stage2\")  \n",
					"\n",
					"    def _process_roster_entity(self, path):\n",
					"        try:\n",
					"            base_path, filename = self.oea.pop_from_path(path)\n",
					"            entity = filename[:-4]\n",
					"            logger.debug(f\"Processing roster entity: path={path}, entity={entity}\")\n",
					"            spark_schema = self.oea.to_spark_schema(self.schemas[entity])\n",
					"            df = spark.read.csv(path, header='false', schema=spark_schema)\n",
					"            df = self.oea.fix_column_names(df)\n",
					"            df.write.format('parquet').mode('overwrite').option(\"mergeSchema\", \"true\").save(self.stage2np + '/' + entity)\n",
					"\n",
					"        except (AnalysisException) as error:\n",
					"            logger.exception(str(error))\n",
					"\n",
					"    def process_latest_roster_from_stage1(self):\n",
					"        latest = oea.get_latest_folder(self.stage1np)\n",
					"        items = mssparkutils.fs.ls(self.stage1np + '/' + latest)\n",
					"        for item in items:\n",
					"            if item.name != 'Activity':     \n",
					"                self._process_entity_from_stage1(latest, item.name, 'csv', 'overwrite', 'false')\n",
					"\n",
					"    def xprocess_roster_data_from_stage1(self):\n",
					"        \"\"\" Processes all roster data in stage1 and writes out to stage2 and stage2p \"\"\"\n",
					"        latest = oea.get_latest_folder(self.stage1np)\n",
					"        logger.info(\"Processing ms_insights roster data from: \" + self.stage1np + '/' + latest)\n",
					"\n",
					"        items = mssparkutils.fs.ls(self.stage1np + '/' + latest)\n",
					"        for item in items:\n",
					"            if item.name != 'Activity':\n",
					"                self._process_roster_entity(item.path)\n",
					"\n",
					"    def reset_roster_processing(self):\n",
					"        \"\"\" Resets all stage1 to stage2 processing of roster data. \"\"\"\n",
					"        # cleanup stage2np\n",
					"        if self.oea.path_exists(self.stage2np):\n",
					"            # Delete roster tables (everything other than TechActivity)\n",
					"            items = mssparkutils.fs.ls(self.stage2np)\n",
					"            #print(file.name, file.isDir, file.isFile, file.path, file.size)\n",
					"            for item in items:\n",
					"                if item.name != 'TechActivity':\n",
					"                    mssparkutils.fs.rm(item.path, True)\n",
					"        # cleanup stage2p\n",
					"        if self.oea.path_exists(self.stage2p):\n",
					"            # Delete roster tables (everything other than TechActivity)\n",
					"            items = mssparkutils.fs.ls(self.stage2p)\n",
					"            #print(file.name, file.isDir, file.isFile, file.path, file.size)\n",
					"            for item in items:\n",
					"                if item.name != 'TechActivity':\n",
					"                    mssparkutils.fs.rm(item.path, True)    \n",
					"  \n",
					"\n",
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}